source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
install.packages("asbio")
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
plot(density(prior_sigma_squared))
number_of_draws = 10000000
# https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution
# From wikipedia, inverse-chisq is related to chisq so we can sample
# from the chisq distribution
# X ~ inv X2(n, t2) -> X ~ inv X2(n) -> Y ~ X2(n) where Y = 1/X
library("asbio")
# draws = rchisq(number_of_draws,length(monthly_income))
draws = rinvchisq(number_of_draws,length(monthly_income)-1)
tao_sq = sum((log(monthly_income)-mean)^2) / length(monthly_income)
upper = n * tao_sq
prior_sigma_squared = upper / draws
plot(density(prior_sigma_squared))
# draws = rchisq(number_of_draws,length(monthly_income))
draws = rinvchisq(number_of_draws,length(monthly_income)-1)
tao_sq = sum((log(monthly_income)-mean)^2) / length(monthly_income)
upper = n * tao_sq
prior_sigma_squared = upper / draws
plot(density(prior_sigma_squared))
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
cdf = ecdf(x)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
plot(density(prior_sigma_squared),x=[1:10])
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
plot(density(prior_sigma_squared),xlim=c(1:10)
plot(density(prior_sigma_squared),xlim=c(1:10))
plot(density(prior_sigma_squared), xlim=c(1,10))
plot(density(prior_sigma_squared), xlim=c(-1,10))
plot(density(prior_sigma_squared), xlim=c(-1,8))
plot(density(prior_sigma_squared), xlim=c(-1,2))
plot(density(prior_sigma_squared), xlim=c(-0,2))
plot(density(prior_sigma_squared), xlim=c(0,3))
# B
# "https://en.wikipedia.org/wiki/Log-normal_distribution"
s2 = prior_sigma_squared
x = sqrt(s2)/sqrt(2)
cdf = pnorm(sqrt(s2)/sqrt(2))
# cdf = ecdf(x)
G = 2 * cdf - 1
plot(density(G))
plot(density(G),xlim=c(0,.8))
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
number_of_draws = 10000
# https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution
# From wikipedia, inverse-chisq is related to chisq so we can sample
# from the rchisq distribution and get the 1/X
draws = rchisq(number_of_draws,n)
############################################################
##                  TASK 2                                ##
############################################################
# A
monthly_income = c(33, 24, 48, 32, 55, 74, 23, 17)
n = length(monthly_income)
df = n - 1 # Lecture 6)
mean = 3.6
number_of_draws = 10000
# https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution
# From wikipedia, inverse-chisq is related to chisq so we can sample
# from the rchisq distribution and get the 1/X
draws = rchisq(number_of_draws,n)
tao_sq = sum((log(monthly_income)-mean)^2) / n
upper = n * tao_sq
prior_sigma_squared = upper / draws
plot(density(prior_sigma_squared), xlim=c(0,3))
# B
# "https://en.wikipedia.org/wiki/Log-normal_distribution"
s2 = prior_sigma_squared
x = sqrt(s2)/sqrt(2)
cdf = pnorm(sqrt(s2)/sqrt(2))
# cdf = ecdf(x)
G = 2 * cdf - 1
plot(density(G),xlim=c(0,.8))
# C
library("bayestestR")
interval = eti(G,0.95)
plot(density(G), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
# D
sorted_G = sort(G)
test = hdi(sorted_G, ci = 0.95)
plot(density(sorted_G), col = "blue",xlim=c(0,.8))
abline(v= test[2], col = "green")
abline(v= test[3], col = "green")
# Comparison
plot(density(sorted_G), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
abline(v= test[2], col = "green")
abline(v= test[3], col = "green")
############################################################
##                  TASK 2                                ##
############################################################
# A
monthly_income = c(33, 24, 48, 32, 55, 74, 23, 17)
n = length(monthly_income)
df = n - 1 # From lecture 6
mean = 3.6
number_of_draws = 10000
# https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution
# From wikipedia, inverse-chisq is related distribution
draws = rchisq(number_of_draws,n)
tao_sq = sum((log(monthly_income)-mean)^2) / n
upper = n * tao_sq
prior_sigma_squared = upper / draws
plot(density(prior_sigma_squared), xlim=c(0,3))
# B
# "https://en.wikipedia.org/wiki/Log-normal_distribution"
s2 = prior_sigma_squared
x = sqrt(s2)/sqrt(2)
cdf = pnorm(sqrt(s2)/sqrt(2))
G = 2 * cdf - 1
plot(density(G),xlim=c(0,.8))
# C
library("bayestestR")
interval = eti(G,0.95)
plot(density(G), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
plot(G, col = "blue",xlim=c(0,.8))
interval = eti(G,0.95)
plot(densityG), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
# D
sorted_G = sort(G)
test = hdi(sorted_G, ci = 0.95)
plot(density(sorted_G), col = "blue",xlim=c(0,.8))
abline(v= test[2], col = "green")
abline(v= test[3], col = "green")
# Comparison
plot(density(sorted_G), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
abline(v= test[2], col = "green")
abline(v= test[3], col = "green")
data= read.table('eBayNumberOfBidderData.dat')
setwd("~/repos/tdde07/lab3")
data= read.table('eBayNumberOfBidderData.dat')
View(data)
View(data)
data_shaved = data[2:7]
View(data_shaved)
View(data_shaved)
View(data_shaved)
data_shaved = data[3:]
data= read.table('eBayNumberOfBidderData.dat')
data_shaved = data[3:]
data_shaved = data[3:10]
data = read.table('eBayNumberOfBidderData.dat')
data_shaved = data[3:10]
# A #############################################
a_model = glm(y ~ ., data = data_shaved)
View(data_shaved)
View(data_shaved)
data = read.table('eBayNumberOfBidderData.dat', header = True)
data = read.table('eBayNumberOfBidderData.dat', header = TRUE)
data = read.table('eBayNumberOfBidderData.dat', header = TRUE)
data_shaved = subset(data,-c('const'))
data_shaved = subset(data,-c(const))
data_shaved = subset(data,select = -c(const))
data = read.table('eBayNumberOfBidderData.dat', header = TRUE)
data_shaved = subset(data, select = -c(const))
# A #############################################
a_model = glm(~., data = data_shaved)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
data_shaved = subset(data, select = -c('const'))
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
# A #############################################
a_model = glm(nbids~., data = data_shaved)
# A #############################################
a_model = glm(nBids~., data = data_shaved)
a_model
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
# A #############################################
a_model = glm(nBids~., data = data_shaved, family = "poisson")
a_model
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
exit
initval = rnorm(9)
Y = data[1]
initval = rnorm(9)
Y = data$nBids
X = data[,2:10]
mean = 0
sigma = data[2:10]
# Send into the function from lecture 6
OptimRes <- optim(initval,poisson_posterior,gr=NULL,Y,X,mean,Sigma,method=c("BFGS"),
control=list(fnscale=-1),hessian=TRUE)
sigma =100* solve(t(X)%*%X)
sigma =100* solve(t(as.mmatrix(X))%*%as.matrix(X))
sigma =100* solve(t(as.matrix(X))%*%as.matrix(X))
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
force(initVal)
force(mu)
force(Sigma)
force(Sigma)
force(Sigma)
force(Sigma)
force(X)
force(y)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
View(OptimRes)
View(OptimRes)
OptimRes$par
a_model$coefficients
# C ######################################################
hessian = OptimRes$hessian
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
# C ######################################################
hessian = solve(OptimRes$hessian)
post_mode = OptimRes$par
c=0.6
theta_p = rmvnorm(1,mean = post_mode, sigma = hessian * 0.6)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
theta_p = rmvnorm(1,mean = post_mode, sigma = hessian)
# C ######################################################
hessian = solve(-OptimRes$hessian)
theta_p = rmvnorm(1,mean = post_mode, sigma = hessian)
c=0.6
theta_p = rmvnorm(1,mean = post_mode, sigma = hessian)
theta_p = rmvnorm(1,mean = post_mode, sigma = 0.6 * hessian)
logpost <- LogPostPoissonBeta(theta_p,hessian,post_mode,Y,X,c)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
force(y)
force(x)
force(beta)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
logprior <- dmvnorm(beta,mode,h, log = TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
third
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
OptimRes$par
posterior_beta_theta0 = rmvnorm(1, post_mode, hessian)
sample_matrix = matrix(1, 10000, 9)
View(sample_matrix)
sample_matrix = matrix(1, iterations, 9)
sample_matrix[1]
sample_matrix[1,]
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
View(sample_matrix)
View(sample_matrix)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
View(sample_matrix)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
sample_matrix[-1,]
sample_matrix[1000,]
theta_p
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
# D #################################################
characteristics = c(1, 1,0,1,0,1,0,1.2,0.8)
prediction = exp(sample_matrix %*% t(characteristics))
prediction = exp(sample_matrix %*% t(as.matrix(characteristics)))
prediction = exp(sample_matrix %*% as.matrix(characteristics))
View(prediction)
plot(prediction)
plot(prediction, ylim = c(0,4))
plot(prediction, ylim = c(0,2))
plot(prediction[500:1000], ylim = c(0,2))
plot(prediction[9500:10000], ylim = c(0,2))
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
for(i in 1:9){
plot(sample_matrix[,i], type = "l")
abline(h=post_mode[i],col = blue)
}
for(i in 1:9){
plot(sample_matrix[,i], type = "l")
abline(h=post_mode[i],col = "blue")
}
plot(prediction[9500:10000], ylim = c(0,2))
prediction = exp(sample_matrix %*% characteristics)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
plot(prediction)
# D #################################################
characteristics = c(4, 1,0,1,0,1,0,1.2,0.8)
prediction = exp(sample_matrix %*% characteristics)
prediction = exp(sample_matrix %*% characteristics)
plot(prediction)
# D #################################################
characteristics = c(90, 1,0,1,0,1,0,1.2,0.8)
prediction = exp(sample_matrix %*% characteristics)
plot(prediction)
# D #################################################
characteristics = c(0, 1,0,1,0,1,0,1.2,0.8)
prediction = exp(sample_matrix %*% characteristics)
plot(prediction)
rpois(1, predicition)
rpois(1, lambda)
lambda = exp(sample_matrix %*% characteristics)
plot(lambda)
rpois(1, lambda)
rpois(1, lambda)
rpois(1, lambda)
rpois(1, lambda)
rpois(1, lambda)
View(data)
View(data)
dpois(1, lambda)
plot(dist)
dist = dpois(1, lambda)
plot(dist)
dist = dpois(5, lambda)
plot(dist)
plot(steps,dist)
lambda = exp(sample_matrix %*% characteristics)
plot(lambda)
steps = 0:5
dist = dpois(steps, lambda)
plot(steps,dist)
steps = 0:5
dist = dpois(steps, lambda)
plot(steps,dist)
View(dist)
plot(steps,y=dist[1])
plot(steps,dist[1])
plot(dist)
plot(1,dist)
plot(dist)
plot(dist)
plot(dist)
lambda = exp(sample_matrix %*% characteristics)
dist = dpois(5, lambda)
plot(dist)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
after_burnout <- sample_matrix[1001:5000,]
predictiveDist <- exp(t(xVector%*%t(after_burnout)))
predictiveDist <- exp(t(characteristics%*%t(after_burnout)))
hist(predictiveDist)
# D #################################################
characteristics = c(1, 1,0,1,0,1,0,1.2,0.8)
after_burnout <- sample_matrix[1001:5000,]
predictiveDist <- exp(t(characteristics%*%t(after_burnout)))
hist(predictiveDist)
predictedVals <- rpois(5000, predictiveDist)
hist(predictedVals, main="simulated predictive distribution")
probZero = sum(predictedVals==0)/length(predictedVals)
probZero
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
plot(after_burnout)
# D #################################################
characteristics = c(0, 1,0,1,0,1,0,1.2,0.8)
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
View(after_burnout)
lambda = exp(after_burnout %*% characteristics)
print(lambda)
print(lambda)
dist = dpois(4000, lambda)
plot(dist)
dist = rpois(4000, lambda)
plot(dist)
dist = rpois(4000, lambda)
no_bidders = 0
bidders = 0
for (i in 1:len(dist))
{
if(dist[i] == 0)
{
no_bidders = no_bidders + 1
}
else
{
bidders = bidders + 1
}
}
for (i in 1:length(dist))
{
if(dist[i] == 0)
{
no_bidders = no_bidders + 1
}
else
{
bidders = bidders + 1
}
}
print(no_bidders/(no_bidders+bidders))
source("~/repos/tdde07/lab3/upg2.R", echo=TRUE)
dist = rpois(1000, lambda)
no_bidders = 0
bidders = 0
for (i in 1:length(dist))
{
if(dist[i] == 0)
{
no_bidders = no_bidders + 1
}
else
{
bidders = bidders + 1
}
}
print(no_bidders/(no_bidders+bidders))
dist = rpois(1000, lambda[-1,])
no_bidders = 0
bidders = 0
for (i in 1:length(dist))
{
if(dist[i] == 0)
{
no_bidders = no_bidders + 1
}
else
{
bidders = bidders + 1
}
}
print(no_bidders/(no_bidders+bidders))
dist = rpois(1000, lambda[1,])
no_bidders = 0
bidders = 0
for (i in 1:length(dist))
{
if(dist[i] == 0)
{
no_bidders = no_bidders + 1
}
else
{
bidders = bidders + 1
}
}
print(no_bidders/(no_bidders+bidders))
after_burnout <- sample_matrix[2001:,]
after_burnout <- sample_matrix[2001:10000,]
plot(after_burnout)
lambda = exp(after_burnout %*% characteristics)
print(lambda)
dist = rpois(1000, lambda)
no_bidders = 0
bidders = 0
for (i in 1:length(dist))
{
if(dist[i] == 0)
{
no_bidders = no_bidders + 1
}
else
{
bidders = bidders + 1
}
}
print(no_bidders/(no_bidders+bidders))
