source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
install.packages("DescTools")
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
install.packages("bayestestR")
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
View(interval)
View(interval)
interval
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
?abline
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
interval
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
interval[1]
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
install.packages("coda")
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
?sort
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
kernel_density_estimate
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
test = hdi(sorted_G, ci = 0.95)
View(test)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
upper = n * tao_sq
posterior_deviation = upper / draws
prior_sigma_squared = upper / draws
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
draws
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
install.packages("asbio")
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
plot(density(prior_sigma_squared))
number_of_draws = 10000000
# https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution
# From wikipedia, inverse-chisq is related to chisq so we can sample
# from the chisq distribution
# X ~ inv X2(n, t2) -> X ~ inv X2(n) -> Y ~ X2(n) where Y = 1/X
library("asbio")
# draws = rchisq(number_of_draws,length(monthly_income))
draws = rinvchisq(number_of_draws,length(monthly_income)-1)
tao_sq = sum((log(monthly_income)-mean)^2) / length(monthly_income)
upper = n * tao_sq
prior_sigma_squared = upper / draws
plot(density(prior_sigma_squared))
# draws = rchisq(number_of_draws,length(monthly_income))
draws = rinvchisq(number_of_draws,length(monthly_income)-1)
tao_sq = sum((log(monthly_income)-mean)^2) / length(monthly_income)
upper = n * tao_sq
prior_sigma_squared = upper / draws
plot(density(prior_sigma_squared))
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
cdf = ecdf(x)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
plot(density(prior_sigma_squared),x=[1:10])
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
plot(density(prior_sigma_squared),xlim=c(1:10)
plot(density(prior_sigma_squared),xlim=c(1:10))
plot(density(prior_sigma_squared), xlim=c(1,10))
plot(density(prior_sigma_squared), xlim=c(-1,10))
plot(density(prior_sigma_squared), xlim=c(-1,8))
plot(density(prior_sigma_squared), xlim=c(-1,2))
plot(density(prior_sigma_squared), xlim=c(-0,2))
plot(density(prior_sigma_squared), xlim=c(0,3))
# B
# "https://en.wikipedia.org/wiki/Log-normal_distribution"
s2 = prior_sigma_squared
x = sqrt(s2)/sqrt(2)
cdf = pnorm(sqrt(s2)/sqrt(2))
# cdf = ecdf(x)
G = 2 * cdf - 1
plot(density(G))
plot(density(G),xlim=c(0,.8))
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
source("~/repos/tdde07/lab1/lab_1_upg_2.R", echo=TRUE)
number_of_draws = 10000
# https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution
# From wikipedia, inverse-chisq is related to chisq so we can sample
# from the rchisq distribution and get the 1/X
draws = rchisq(number_of_draws,n)
############################################################
##                  TASK 2                                ##
############################################################
# A
monthly_income = c(33, 24, 48, 32, 55, 74, 23, 17)
n = length(monthly_income)
df = n - 1 # Lecture 6)
mean = 3.6
number_of_draws = 10000
# https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution
# From wikipedia, inverse-chisq is related to chisq so we can sample
# from the rchisq distribution and get the 1/X
draws = rchisq(number_of_draws,n)
tao_sq = sum((log(monthly_income)-mean)^2) / n
upper = n * tao_sq
prior_sigma_squared = upper / draws
plot(density(prior_sigma_squared), xlim=c(0,3))
# B
# "https://en.wikipedia.org/wiki/Log-normal_distribution"
s2 = prior_sigma_squared
x = sqrt(s2)/sqrt(2)
cdf = pnorm(sqrt(s2)/sqrt(2))
# cdf = ecdf(x)
G = 2 * cdf - 1
plot(density(G),xlim=c(0,.8))
# C
library("bayestestR")
interval = eti(G,0.95)
plot(density(G), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
# D
sorted_G = sort(G)
test = hdi(sorted_G, ci = 0.95)
plot(density(sorted_G), col = "blue",xlim=c(0,.8))
abline(v= test[2], col = "green")
abline(v= test[3], col = "green")
# Comparison
plot(density(sorted_G), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
abline(v= test[2], col = "green")
abline(v= test[3], col = "green")
############################################################
##                  TASK 2                                ##
############################################################
# A
monthly_income = c(33, 24, 48, 32, 55, 74, 23, 17)
n = length(monthly_income)
df = n - 1 # From lecture 6
mean = 3.6
number_of_draws = 10000
# https://en.wikipedia.org/wiki/Inverse-chi-squared_distribution
# From wikipedia, inverse-chisq is related distribution
draws = rchisq(number_of_draws,n)
tao_sq = sum((log(monthly_income)-mean)^2) / n
upper = n * tao_sq
prior_sigma_squared = upper / draws
plot(density(prior_sigma_squared), xlim=c(0,3))
# B
# "https://en.wikipedia.org/wiki/Log-normal_distribution"
s2 = prior_sigma_squared
x = sqrt(s2)/sqrt(2)
cdf = pnorm(sqrt(s2)/sqrt(2))
G = 2 * cdf - 1
plot(density(G),xlim=c(0,.8))
# C
library("bayestestR")
interval = eti(G,0.95)
plot(density(G), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
plot(G, col = "blue",xlim=c(0,.8))
interval = eti(G,0.95)
plot(densityG), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
# D
sorted_G = sort(G)
test = hdi(sorted_G, ci = 0.95)
plot(density(sorted_G), col = "blue",xlim=c(0,.8))
abline(v= test[2], col = "green")
abline(v= test[3], col = "green")
# Comparison
plot(density(sorted_G), col = "blue",xlim=c(0,.8))
abline(v= interval[2], col = "red")
abline(v= interval[3], col = "red")
abline(v= test[2], col = "green")
abline(v= test[3], col = "green")
initVal <- rnorm(7)
# Assignment 2
# A ######################################
library("mvtnorm")
library("bayestestR")
WomenData = read.table("WomenAtWork.dat",sep = " ",header = T)
WomenData = read.table("WomenAtWork.dat",sep = " ",header = T)
setwd("~/repos/tdde07/lab2")
# Assignment 2
# A ######################################
library("mvtnorm")
library("bayestestR")
WomenData = read.table("WomenAtWork.dat",sep = " ",header = T)
View(WomenData)
View(WomenData)
mu <- as.matrix(rep(0,7)) # Prior mean vector
# Assignment 2
# A ######################################
library("mvtnorm")
library("bayestestR")
WomenData = read.table("WomenAtWork.dat",sep = " ",header = T)
Y = WomenData[,1] # Work or No work (0, 1)
X = WomenData[,2:8] # Attributes
tao = 2 # From task
I_matrix = diag(7) # 7 variables, needed for b ~ N(*, *)
# Code from lecture 6, copypaste
logistic_posterior <- function(initVal, y, X, mu, Sigma)
{
linPred <- as.matrix(X)%*%initVal;
logLik <- sum( linPred*y - log(1 + exp(linPred)) ); # Likelihood
logPrior <- dmvnorm(initVal, mu, Sigma, log=TRUE); # Denisty multivariate normal, prior
return(logLik + logPrior)
}
initVal = rnorm(7) # Init the 7 random variable thetas using the normal distribution
mu <- as.matrix(rep(0,7)) # Prior mean vector is 0 from the task description
Sigma = (tao^2)*I_matrix # Sigma = the right value in b ~ N(*, *) from task description
# Send into the function from lecture 6
OptimRes <- optim(initVal,logistic_posterior,gr=NULL,Y,X,mu,Sigma,method=c("BFGS"),
control=list(fnscale=-1),hessian=TRUE)
# Posterior and approx posteriod std deviation from optim, same way as in
# lecture 6 vode
print("Posterior mode is")
OptimRes$par
approxPostStd <- sqrt(diag(solve(-OptimRes$hessian)))
print('The approximate posterior standard deviation is:')
print(approxPostStd)
x_hat = mean(WomenData$NSmallChild) # Get the mean from the NSmallChild data
# 95% Confidence interval calculations from wikipedia
ci = (1.96 * approxPostStd[6])/sqrt(nrow(WomenData))
ci_upper = x_hat + ci
ci_lower = x_hat - ci
ci_upper
ci_lower
# Comparison
glmModel<- glm(Work ~ 0 + ., data = WomenData, family = binomial)
print("Comparison")
print(glmModel$coefficients)
print(OptimRes$par)
# C ############################################
#
b_i = rmvnorm(1000, mean = OptimRes$par, sigma = -solve(OptimRes$hessian))
# C ############################################
# draw from the random multivariate norm using the means from the optim.
# The inverse hessian is the sigma for the approximation for the parameter vector
# b
approx_b_vector = rmvnorm(1000, mean = OptimRes$par, sigma = -solve(OptimRes$hessian))
# Probability logistic regression model from task description
p = exp(t(as.matrix(x)) %*% t(approx_b_vector)) / (1 + exp(t(as.matrix(x)) %*% t(approx_b_vector)))
# B ###################################################
beta = rmvnorm(1000, mean = OptimRes$par, sigma = -solve(OptimRes$hessian))
beta_t = t(beta)
x = c(1,18,11,7,40,1,1)
beta
prob_1 = exp(t(as.matrix(x)) %*% t(beta)) / (1 + exp(t(as.matrix(x)) %*% t(beta)))
prob_0 = 1 - prob_1
plot(density(prob_0))
# C ############################################
# draw from the random multivariate norm using the means from the optim.
# The inverse hessian is the sigma for the approximation for the parameter vector
# b
approx_b_vector = rmvnorm(1000, mean = OptimRes$par, sigma = -solve(OptimRes$hessian))
# Probability logistic regression model from task description
p = exp(t(as.matrix(x)) %*% t(approx_b_vector)) / (1 + exp(t(as.matrix(x)) %*% t(approx_b_vector)))
bino_simulation = rbinom(13, 1,p)
setwd("~/repos/tdde07/lab2")
?rbinom
# Logistic regression gives prob = 1, we want prob = 0 (1 - prob=1)
prob_0 = 1 - prob_1
plot(density(prob_0))
# Sample 13 woman 1x with the probability p
bino_simulation = rbinom(13, 1, p)
# Sum which ones are 0 and 1
sum_0 = sum(bino_simulation == 0)
sum_1 = sum(bino_simulation == 1)
barplot(c(sum_0, sum_1),col=c("Red","Blue"),legend=c("Not working", "working"),ylim=c(0,15))
print("Posterior probability")
print(sum_0/(sum_0 + sum_1))
# The percent of women not working is the amount of no work divided by the total amount
print(sum_0/(sum_0 + sum_1))
